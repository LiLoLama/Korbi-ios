-- Schema setup for Haus & Hand
create extension if not exists "uuid-ossp";
create extension if not exists "pgcrypto";

drop type if exists role_t cascade;
create type role_t as enum ('owner','admin','member');

drop type if exists item_status_t cascade;
create type item_status_t as enum ('open','purchased');

create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  display_name text,
  created_at timestamptz default now()
);

create table if not exists public.households (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  created_by uuid not null references auth.users(id) on delete restrict,
  created_at timestamptz default now()
);

create table if not exists public.household_members (
  id uuid primary key default gen_random_uuid(),
  household_id uuid not null references public.households(id) on delete cascade,
  user_id uuid not null references auth.users(id) on delete cascade,
  role role_t not null default 'member',
  created_at timestamptz default now(),
  unique(household_id, user_id)
);

create table if not exists public.invites (
  token uuid primary key default gen_random_uuid(),
  household_id uuid not null references public.households(id) on delete cascade,
  created_by uuid not null references auth.users(id),
  expires_at timestamptz not null default (now() + interval '7 days')
);

create table if not exists public.lists (
  id uuid primary key default gen_random_uuid(),
  household_id uuid not null references public.households(id) on delete cascade,
  name text not null,
  is_default boolean not null default false,
  created_at timestamptz default now()
);

create table if not exists public.items (
  id uuid primary key default gen_random_uuid(),
  list_id uuid not null references public.lists(id) on delete cascade,
  name text not null,
  quantity_text text,
  quantity_numeric numeric,
  unit text,
  status item_status_t not null default 'open',
  position int generated by default as identity,
  created_by uuid references auth.users(id),
  purchased_by uuid references auth.users(id),
  created_at timestamptz default now(),
  purchased_at timestamptz
);

create index if not exists idx_members_user on public.household_members(user_id);
create index if not exists idx_lists_household on public.lists(household_id);
create index if not exists idx_items_list on public.items(list_id);
